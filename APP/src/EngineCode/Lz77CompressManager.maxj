import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.build.EngineParameters;
/*
import com.maxeler.maxcompiler.v2.managers.BuildConfig.Level;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.Effort;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.StateMachineBlock;
*/
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.Direction;

public class Lz77CompressManager extends CustomManager{

    private static final String s_kernel1 = "GetHashValuesKernel";
    private static final String s_kernel2 = "HashTableKernel";
    private static final String s_kernel3 = "MatchingKernel";
    private static final String s_kernel4 = "SelectionKernel";

    private static final int MAX_UNCODED = 2;
    private static final int COMPARE_CNT = 8;
    private static final int WINDOW_SIZE = 1 << 12;
    private static final int HASH_SIZE = WINDOW_SIZE >> 2;
    
    Lz77CompressManager(EngineParameters ep) {
        super(ep);
          
        config.setAllowNonMultipleTransitions(true);
        addMaxFileConstant("MAX_UNCODED", MAX_UNCODED);
        addMaxFileConstant("COMPARE_CNT", COMPARE_CNT);
        addMaxFileConstant("HASH_SIZE"  , HASH_SIZE);
        addMaxFileConstant("WINDOW_SIZE", WINDOW_SIZE);

        KernelBlock getHashValuesKernel 
            = addKernel(new GetHashValuesKernel(makeKernelParameters(s_kernel1), MAX_UNCODED, COMPARE_CNT, HASH_SIZE));
        KernelBlock hashTableKernel     
            = addKernel(new HashTableKernel(makeKernelParameters(s_kernel2), COMPARE_CNT, HASH_SIZE, WINDOW_SIZE));
        KernelBlock matchingKernel[]    = new KernelBlock[COMPARE_CNT];
        for(int i = 0; i < COMPARE_CNT; i++)
        {
            matchingKernel[i] = 
                addKernel(new MatchingKernel(makeKernelParameters(s_kernel3+i), i, COMPARE_CNT, WINDOW_SIZE));
        }
        KernelBlock selectionKernel     
            = addKernel(new SelectionKernel(makeKernelParameters(s_kernel4), MAX_UNCODED, COMPARE_CNT, WINDOW_SIZE));
        
        addStreamToOnCardMemory("cpu2lmem", MemoryControlGroup.MemoryAccessPattern.LINEAR_1D) <== addStreamFromCPU("input"); 
        getHashValuesKernel.getInput("input")   
            <== addStreamFromOnCardMemory("inputLmem", MemoryControlGroup.MemoryAccessPattern.LINEAR_1D);

        hashTableKernel.getInput("hashValues")      <== getHashValuesKernel.getOutput("hashValues");
        hashTableKernel.getInput("bytesBuffer")     <== getHashValuesKernel.getOutput("bytesBuffer");
        for(int i = 0; i < COMPARE_CNT; i++)
        {
            matchingKernel[i].getInput("bytesToStore")      <== hashTableKernel.getOutput("bytesToStore"+i);
            matchingKernel[i].getInput("bytesToCompare")    <== hashTableKernel.getOutput("bytesToCompare"+i);
            matchingKernel[i].getInput("index")             <== hashTableKernel.getOutput("index"+i);
            
            selectionKernel.getInput("length"+i)   <== matchingKernel[i].getOutput("length");
            selectionKernel.getInput("offset"+i)   <== matchingKernel[i].getOutput("offset");
            selectionKernel.getInput("byte"+i)     <== matchingKernel[i].getOutput("byte");
        }
        
        addStreamToOnCardMemory("outputDataLmem", MemoryControlGroup.MemoryAccessPattern.LINEAR_1D)   
            <== selectionKernel.getOutput("dataBits");
        addStreamToOnCardMemory("outputLenLmem", MemoryControlGroup.MemoryAccessPattern.LINEAR_1D)    
            <== selectionKernel.getOutput("validBits");
        
        addStreamToCPU("separateDataaaa")  <== addStreamFromOnCardMemory("lmem2cpu_Data", MemoryControlGroup.MemoryAccessPattern.LINEAR_1D);
        addStreamToCPU("separateLenaaa")   <== addStreamFromOnCardMemory("lmem2cpu_Len",  MemoryControlGroup.MemoryAccessPattern.LINEAR_1D);
        
    }
    
    private static EngineInterface interfaceWrite(String name) {
        EngineInterface ei = new EngineInterface(name);

        InterfaceParam N  = ei.addParam("N", CPUTypes.INT);
        InterfaceParam zero = ei.addConstant(0l);

        ei.setStream("input",           CPUTypes.UINT8, N * CPUTypes.UINT8.sizeInBytes());
        ei.setLMemLinear("cpu2lmem",    zero,           N * CPUTypes.UINT8.sizeInBytes());
        ei.ignoreAll(Direction.IN_OUT);
        return ei; 
    }   
    

    private static EngineInterface interfaceRead(String name) {
        EngineInterface ei = new EngineInterface(name);

        InterfaceParam N  = ei.addParam("N", CPUTypes.INT);

        ei.setLMemLinear("lmem2cpu_Data",   2 * N * CPUTypes.UINT8.sizeInBytes(),   N * CPUTypes.UINT32.sizeInBytes());
        ei.setLMemLinear("lmem2cpu_Len" ,   N * CPUTypes.UINT8.sizeInBytes(),       N * CPUTypes.UINT8.sizeInBytes());
        ei.setStream("separateDataaaa"  ,   CPUTypes.UINT32,    N * CPUTypes.UINT32.sizeInBytes());
        ei.setStream("separateLenaaa"   ,   CPUTypes.UINT8,     N * CPUTypes.UINT8.sizeInBytes());
        ei.ignoreAll(Direction.IN_OUT);
        return ei; 
    }   


    private static EngineInterface interfaceDefault() {
        EngineInterface ei = new EngineInterface();
        
        InterfaceParam N = ei.addParam("N", CPUTypes.INT);

        ei.setTicks(s_kernel1, N/8); 
        ei.setTicks(s_kernel2, N/8);
        for(int i = 0; i < COMPARE_CNT; i++)
            ei.setTicks(s_kernel3+i, N/8);
        ei.setTicks(s_kernel4, N/8);
        ei.setScalar(s_kernel1, "dataSize", N);
        
        ei.setLMemLinear("inputLmem",       0 * N * CPUTypes.UINT8.sizeInBytes(),   N * CPUTypes.UINT8.sizeInBytes());
        ei.setLMemLinear("outputLenLmem",   1 * N * CPUTypes.UINT8.sizeInBytes(),   N * CPUTypes.UINT8.sizeInBytes());
        ei.setLMemLinear("outputDataLmem",  2 * N * CPUTypes.UINT8.sizeInBytes(),   N * CPUTypes.UINT32.sizeInBytes());
        ei.ignoreAll(Direction.IN_OUT);
        return ei;
    }

    public static void main(String[] args) {
        Lz77CompressManager manager = new Lz77CompressManager(new EngineParameters(args));
        
        manager.createSLiCinterface(interfaceWrite("WriteLmem"));
        manager.createSLiCinterface(interfaceRead("ReadLmem"));
        manager.createSLiCinterface(interfaceDefault());
        manager.build();
    }
}

