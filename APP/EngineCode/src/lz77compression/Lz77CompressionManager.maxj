
package lz77compression;

import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

public class Lz77CompressionManager extends CustomManager {

	private static final String s_kernelName = "Lz77CompressionKernel";
	
	public Lz77CompressionManager(Lz77CompressionEngineParameters engineParameters) {
		super(engineParameters);

		KernelBlock block = addKernel(new Lz77CompressionKernel(makeKernelParameters(s_kernelName)));

		for (String inputName: block.getAllInputs())
			block.getInput(inputName).connect(addStreamFromCPU(inputName));
		for (String outputName: block.getAllOutputs())
			addStreamToCPU(outputName).connect(block.getOutput(outputName));

		createSLiCinterface(modeDefault());

		configBuild(engineParameters);
	}

	private static EngineInterface modeDefault() {
		EngineInterface engine_interface = new EngineInterface();
		CPUTypes   type = CPUTypes.INT32;
		int        size = type.sizeInBytes();

		InterfaceParam  a    = engine_interface.addParam("A", CPUTypes.INT);
		InterfaceParam  N    = engine_interface.addParam("N", CPUTypes.INT);

		engine_interface.setScalar(s_kernelName, "a", a);

		engine_interface.setTicks(s_kernelName, N);
		engine_interface.setStream("x",   type, N * size);
		engine_interface.setStream("y",   type, N * size);
		engine_interface.setStream("s", type, N * size);
		return engine_interface;
	}
	
	private void configBuild(Lz77CompressionEngineParameters params) {
		BuildConfig buildConfig = getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());
	}
	
	public static void main(String[] args) {
		Lz77CompressionManager manager = new Lz77CompressionManager(new Lz77CompressionEngineParameters(args));
		manager.build();
	}
}

